#version 450

layout (local_size_x = 16, local_size_y = 16) in;

// Specialization constant: 0 = vertical, 1 = horizontal
layout (constant_id = 0) const uint kIsHorizontal = 1;

layout(set = 0, binding = 0) uniform sampler2D texDepth;
layout(set = 0, binding = 1) uniform sampler2D texIn;
layout(set = 0, binding = 2, rgba8) writeonly uniform image2D texOut;

layout(push_constant) uniform BlurParams {
    float depthThreshold;
} pc;

const int kFilterSize = 17;

const float gaussWeights[kFilterSize] = float[](
  0.00001525878906,
  0.0002441406250,
  0.001831054688,
  0.008544921875,
  0.02777099609,
  0.06665039063,
  0.1221923828,
  0.1745605469,
  0.1963806152,
  0.1745605469,
  0.1221923828,
  0.06665039063,
  0.02777099609,
  0.008544921875,
  0.001831054688,
  0.0002441406250,
  0.00001525878906
);


void main() {

    const vec2 size = textureSize(texIn, 0).xy;
    const vec2 xy = gl_GlobalInvocationID.xy;

    if (xy.x > size.x || xy.y > size.y) {
        
        return;
    }

    const vec2 texCoord = (gl_GlobalInvocationID.xy + vec2(0.5)) / size;
    const float texScaler = 1.0 / (kIsHorizontal == 1 ? size.x : size.y);

    vec3 c = vec3(0.0);

    vec3 fragColor = texture(texIn, texCoord).rgb;
    float fragDepth = texture(texDepth, texCoord).r;

    for (int i = 0; i != kFilterSize; i++) {

      float offset = float(i - kFilterSize/2);
      vec2 uv = texCoord + texScaler * (kIsHorizontal == 1 ? vec2(offset, 0) : vec2(0, offset));
      vec3 color = texture(texIn, uv).rgb;
      float depth = texture(texDepth, uv).r;

      float weight = clamp(abs(depth - fragDepth) * pc.depthThreshold, 0.0, 1.0);
      c += mix(color, fragColor, weight) * gaussWeights[i];

    }

    imageStore(texOut, ivec2(xy), vec4(c, 1.0));
}
